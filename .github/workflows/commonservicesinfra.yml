name: Terraform Deploy commonservices

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - qa
          - stage
          - prod
      application:
        description: 'Application'
        required: true
        default: 'commonservices'
        type: choice
        options:
          - commonservices    
      vpcEnabled:
        description: 'Plan VPC'
        required: true
        default: 'false'
        type: boolean
      eksEnabled:
        description: 'Plan EKS'
        required: true
        default: 'false'
        type: boolean
      ec2Enabled:
        description: 'Plan EC2'
        required: true
        default: 'false'
        type: boolean
      ecrEnabled:
        description: 'Plan ECR'
        required: true
        default: 'false'
        type: boolean        
      efsEnabled:
        description: 'Plan EFS'
        required: true
        default: 'false'
        type: boolean           
      remoteProvisionerEnabled:
        description: 'Plan RemoteProvisioner'
        required: true
        default: 'false'
        type: boolean          
      terraformApply:
        description: 'Apply Terraform changes after Plan'
        required: true
        default: 'false'
        type: boolean             
env:
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  APPLICATION: ${{ github.event.inputs.application }}
  VPC_PLAN: ${{ github.event.inputs.vpcEnabled }} 
  EKS_PLAN: ${{ github.event.inputs.eksEnabled }} 
  EC2_PLAN: ${{ github.event.inputs.ec2Enabled }} 
  ECR_PLAN: ${{ github.event.inputs.ecrEnabled }} 
  EFS_PLAN: ${{ github.event.inputs.efsEnabled }}
  REMOTEPROVISIONER_PLAN: ${{ github.event.inputs.remoteProvisionerEnabled }}   
  TERRAFORM_APPLY: ${{ github.event.inputs.terraformApply }}  
jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Code
      uses: actions/checkout@v2

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.7.2

    - name: Lint Terraform Code
      run: terraform fmt -check

    - name: Set environment variables
      run: |
        echo "ENVIRONMENT=${{ env.ENVIRONMENT }}" >> $GITHUB_ENV
        echo "APPLICATION=${{ env.APPLICATION }}" >> $GITHUB_ENV
        echo "VPC_APPLY=${{ env.TERRAFORM_APPLY == 'true' && env.VPC_PLAN == 'true' }}" >> $GITHUB_ENV
        echo "EKS_APPLY=${{ env.TERRAFORM_APPLY == 'true' && env.EKS_PLAN == 'true' }}" >> $GITHUB_ENV
        echo "EC2_APPLY=${{ env.TERRAFORM_APPLY == 'true' && env.EC2_PLAN == 'true' }}" >> $GITHUB_ENV
        echo "ECR_APPLY=${{ env.TERRAFORM_APPLY == 'true' && env.ECR_PLAN == 'true' }}" >> $GITHUB_ENV
        echo "EFS_APPLY=${{ env.TERRAFORM_APPLY == 'true' && env.EFS_PLAN == 'true' }}" >> $GITHUB_ENV
        echo "REMOTEPROVISIONER_APPLY=${{ env.TERRAFORM_APPLY == 'true' && env.REMOTEPROVISIONER_PLAN == 'true' }}" >> $GITHUB_ENV  
        
    - name: Set AWS Access Key ID and Secret Access Key based on Environment
      run: |
        if [ "${{ github.event.inputs.environment }}" == "dev" ]; then
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_DEV }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.environment }}" == "qa" ]; then
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_QA }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_QA }}" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.environment }}" == "stage" ]; then
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_STAGE }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_STAGE }}" >> $GITHUB_ENV
        elif [ "${{ github.event.inputs.environment }}" == "prod" ]; then
          echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID_PROD }}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}" >> $GITHUB_ENV
        else
          echo "Invalid environment!"
          exit 1
        fi
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1  # Adjust as necessary for your region        
        
    - name: Save Terraform Plan
      if: env.TERRAFORM_APPLY == 'false'
      uses: actions/upload-artifact@v2
      with:
        name: terraform-plan
        path: ./terraform_infra_aws/applications/${{ env.APPLICATION }}/environments/${{ env.ENVIRONMENT }}

    - name: Create .tfvars file commonservices
      if: env.APPLICATION == 'commonservices'
      working-directory: ./terraform_infra_aws/applications/${{ env.APPLICATION }}/environments/${{ env.ENVIRONMENT }}
      run: |
        cat <<EOF > runtime-variables.tfvars
        aws_access_key_id = "${{ env.AWS_ACCESS_KEY_ID }}"
        aws_secret_access_key = "${{ env.AWS_SECRET_ACCESS_KEY }}"
        github_username = "${{ secrets.GITHB_USERNAME }}"
        github_password = "${{ secrets.GITHB_TOKEN }}"
        EOF
        
    - name: Terraform Operations
      run: |
        declare -A services=(
          [vpc]="${{ env.VPC_PLAN }}"
          [eks]="${{ env.EKS_PLAN }}"
          [ec2]="${{ env.EC2_PLAN }}"
          [ecr]="${{ env.ECR_PLAN }}"
          [efs]="${{ env.EFS_PLAN }}"
          [remoteprovisioner]="${{ env.REMOTEPROVISIONER_PLAN }}"
        )

        for service in "${!services[@]}"; do
          if [ "${services[$service]}" == "true" ]; then
            echo "Initializing and planning $service..."
            terraform init -chdir=./terraform_infra_aws/applications/${{ env.APPLICATION }}/environments/${{ env.ENVIRONMENT }}/$service
            terraform plan -chdir=./terraform_infra_aws/applications/${{ env.APPLICATION }}/environments/${{ env.ENVIRONMENT }}/$service -var-file="../runtime-variables.tfvars" -var-file="../${{ env.ENVIRONMENT }}-terraform.tfvars"

            if [ "${{ env.TERRAFORM_APPLY }}" == "true" ]; then
              echo "Applying $service..."
              terraform apply -chdir=./terraform_infra_aws/applications/${{ env.APPLICATION }}/environments/${{ env.ENVIRONMENT }}/$service -var-file="../runtime-variables.tfvars" -var-file="../${{ env.ENVIRONMENT }}-terraform.tfvars" -auto-approve
            fi
          fi
        done
